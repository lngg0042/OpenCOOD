# configures a cooperative 3D object detection model using PointPillar for feature extraction, V2VNet for multi-agent fusion, 
# preprocessing: sparse voxelization
# data augmentation: random flipping, random rotation, random scaling
# post processing: anchor boxes for detection, uses voxel post processor, nms threshold: 0:15
# model: point pillar feature extraction, BEV backbone, V2VNet fusion model with GRU-based aggregation
# loss: combines classification and regression loss
# optimizer: adam optimizer
# learning rate scheduler: multi step schedule with decap at epochs 10,50,80

# Basic path and settings
name: point_pillar_v2vnet
root_dir: 'opv2v_data_dumping/train'
validate_dir: 'opv2v_data_dumping/validate'

yaml_parser: "load_point_pillar_params" # parse these parameters
train_params:
  batch_size: &batch_size 4 # Number of samples per batch
  epoches: 60 # Number of training epochs
  eval_freq: 1 # How often to evaluate during training (in epochs)
  save_freq: 1
  max_cav: &max_cav 5 # Maximum no. of Connected Autonomous Vehicles (CAVs) involved in cooperative perception

fusion:
  core_method: 'IntermediateFusionDataset' # LateFusionDataset, EarlyFusionDataset, IntermediateFusionDataset supported
  args:
    proj_first: true # Whether to project features before fusion

# preprocess-related
preprocess:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: &voxel_size [0.4, 0.4, 4]
    max_points_per_voxel: 32
    max_voxel_train: 32000
    max_voxel_test: 70000
  # lidar range for each individual cav.
  cav_lidar_range: &cav_lidar [-140.8, -40, -3, 140.8, 40, 1]

data_augment:
  # randomly flip the scene along the x-axis
  - NAME: random_world_flip
    ALONG_AXIS_LIST: [ 'x' ]

  # randomly rotate the scene within +- 45 degree
  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [ -0.78539816, 0.78539816 ]

  # randomly scale the scene between 95% and 105%
  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [ 0.95, 1.05 ]

# anchor box related
postprocess:
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  anchor_args: # defines anchor box sizes, orientations and their ranges
    cav_lidar_range: *cav_lidar
    l: 3.9
    w: 1.6
    h: 1.56
    r: [0, 90]
    feature_stride: 4
    num: &achor_num 2
  target_args: # thresholds for positive/negative samples and objectness score
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.20
  order: 'hwl' # hwl or lwh (height width length)
  max_num: 100 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15 # non-maximum suppression threshold

# model related
# model architecture
model:
  core_method: point_pillar_v2vnet
  args:
    voxel_size: *voxel_size
    lidar_range: *cav_lidar
    anchor_number: *achor_num
    max_cav: *max_cav
    compression: 0 # compression rate
    backbone_fix: false

    pillar_vfe: #pillar feature extraction settings
      use_norm: true
      with_distance: false
      use_absolute_xyz: true
      num_filters: [64]
    point_pillar_scatter:
      num_features: 64

    base_bev_backbone: # backbone network for BEV
      layer_nums: [3, 5, 8]
      layer_strides: [2, 2, 2]
      num_filters: [64, 128, 256]
      upsample_strides: [1, 2, 4]
      num_upsample_filter: [128, 128, 128]
    shrink_header: # additional head for feature dimensionality reduction
      kernal_size: [ 3 ]
      stride: [ 2 ]
      padding: [ 1 ]
      dim: [ 256 ]
      input_dim: 384 # 128 * 3

    v2vfusion: # settings for V2VNet feature fusion including GRU and aggregation operator
      voxel_size: *voxel_size
      downsample_rate: 4
      num_iteration: 2
      in_channels: 256
      gru_flag: true
      agg_operator: "avg" # max or avg
      conv_gru:
        H: 50
        W: 176
        num_layers: 1
        kernel_size: [[3,3]]


      # add decoder later

# loss function
loss:
  core_method: point_pillar_loss
  args:
    cls_weight: 1.0
    reg: 2.0 # classification and regression weights

# learning rate scheduler
optimizer:
  core_method: Adam
  lr: 0.001
  args:
    eps: 1e-10
    weight_decay: 1e-4 # decays learning rate at epochs 10,50 and 80 by a factor of 0.1

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  gamma: 0.1
  step_size: [10, 50, 80]

