# use v2x dataset, pointpillar + COBEVT transformer fusion
# Preprocessing: Voxelization, range/size settings.
# Augmentation: Flips, rotations, scaling.
# Postprocessing: Anchor-based object detection.
# Training: Adam optimizer, cosine annealing schedule, up to 5 vehicles.
# Simulation: Optional asynchrony, delays, and noise to match real-world conditions.

# transformer: transformer-based neural networks (originally developed for NLP) to 
# process and fuse information from multiple agents.

# cosine annealing: learning rate schedule that smoothly decreases the LR following a cosine curve
# Instead of reducing the learning rate at fixed steps (like step decay), the learning rate smoothly decreases following a cosine curve.
# Helps avoid getting stuck in poor local minima.
# Often leads to better convergence and sometimes improved model performance.
# The smooth adjustment can help the optimizer “settle” into a better solution at the end of training.

name: corpbevtlidar
root_dir: 'v2xset/train'
validate_dir: 'v2xset/validate'

# parameters simulating real-world communicaation and sensor noise
wild_setting:
  async: false # whether asynchronous communication is simulated
  async_overhead: 100 # extra communication delay
  seed: 20
  loc_err: false # enable/disable simulated localization error
  xyz_std: 0.2 # standard deviations for position/orientation noise
  ryp_std: 0.2
  data_size: 1.06 # Mb!!
  transmission_speed: 27 # Mbps!!
  backbone_delay: 10 # ms

yaml_parser: "load_point_pillar_params"
train_params:
  batch_size: &batch_size 4 # number of samples per mini-batch
  epoches: &epoches 90 # total number of training epochs
  eval_freq: 2 # evaluation frequency (in epochs)
  save_freq: 1 # model checkpoint save frequency
  max_cav: &max_cav 5 # maximum number of cooperative autonomous vehicles in training

fusion:
  core_method: 'IntermediateFusionDataset' # LateFusionDataset, EarlyFusionDataset, IntermediateFusionDataset supported
  args: []

# preprocess-related
preprocess:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor' # methods for preprocessing the raw point cloud (here, sparse voxelization)
  args:
    voxel_size: &voxel_size [0.4, 0.4, 4]
    max_points_per_voxel: 32
    max_voxel_train: 32000
    max_voxel_test: 70000
  # lidar range for each individual cav.
  cav_lidar_range: &cav_lidar [-140.8, -38.4, -3, 140.8, 38.4, 1]

data_augment:
  - NAME: random_world_flip
    ALONG_AXIS_LIST: [ 'x' ]

  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [ -0.78539816, 0.78539816 ]

  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [ 0.95, 1.05 ]

# anchor box related
postprocess:
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  anchor_args: # anchor box dimensions, orientation, stride, number and range
    cav_lidar_range: *cav_lidar
    l: 3.9
    w: 1.6
    h: 1.56
    r: [0, 90]
    feature_stride: 4
    num: &achor_num 2
  target_args: # thresholds for positive/negative anchors, score threshold
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.20
  order: 'hwl' # hwl or lwh
  max_num: 100 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15 # non-maximum suppression threshold

# model related
# settings for pointpillar architecture
model:
  core_method: point_pillar_cobevt
  args:
    voxel_size: *voxel_size
    lidar_range: *cav_lidar
    anchor_number: *achor_num
    max_cav: *max_cav
    compression: 0 # compression rate
    backbone_fix: false

    pillar_vfe:
      use_norm: true
      with_distance: false
      use_absolute_xyz: true
      num_filters: [64]
    point_pillar_scatter:
      num_features: 64

    base_bev_backbone:
      layer_nums: [3, 5, 8]
      layer_strides: [2, 2, 2]
      num_filters: [64, 128, 256]
      upsample_strides: [1, 2, 4]
      num_upsample_filter: [128, 128, 128]
    shrink_header:
      kernal_size: [3]
      stride: [2]
      padding: [1]
      dim: [256]
      input_dim: 384 # 128 * 3

    fax_fusion: # Parameters for the CoBEVT transformer-based fusion module
      input_dim: 256
      mlp_dim: 256
      agent_size: *max_cav
      window_size: 4
      dim_head: 32
      drop_out: 0.1
      depth: 3
      mask: true


      # add decoder later

loss:
  core_method: point_pillar_loss
  args:
    cls_weight: 1.0
    reg: 2.0

optimizer:
  core_method: Adam
  lr: 0.001
  args:
    eps: 1e-10
    weight_decay: 1e-4

lr_scheduler:
    core_method: cosineannealwarm #step, multistep, Exponential and cosineannealwarm support
    epoches: *epoches
    warmup_lr: 2e-4
    warmup_epoches: 10
    lr_min: 2e-5
